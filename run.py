from utils import *
import telebot
import sys

TOKEN = config('TOKEN')

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")  # You can set parse_mode by default. HTML or MARKDOWN
handler = logging.StreamHandler(sys.stdout)
telebot.logger.addHandler(handler)
telebot.logger.setLevel(logging.WARNING)


def first_move_prompt(chat_id: int):
    prediction = api_call(1, [])
    bot.send_message(chat_id, "<b>–•–æ–¥ 1 (–Ω–∞—à).</b> –ö–æ–≥–æ –∑–∞–±–∞–Ω–∏–º? –í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∏–º—è –≥–µ—Ä–æ—è üëá")

    # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º
    keyboard = telebot.types.InlineKeyboardMarkup()
    buttons = [telebot.types.InlineKeyboardButton("{}".format(id2hero(hero["id"])), callback_data=hero["id"])
               for hero in prediction["low"]]
    keyboard.row(*buttons)
    bot.send_message(chat_id, "<b> –í–∞—Ä–∏–∞–Ω—Ç—ã —Å –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º </b>",  reply_markup=keyboard)

    # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º
    keyboard = telebot.types.InlineKeyboardMarkup()
    buttons = [telebot.types.InlineKeyboardButton("{}".format(id2hero(hero["id"])), callback_data=hero["id"])
               for hero in prediction["moderate"]]
    keyboard.row(*buttons)
    bot.send_message(chat_id, "<b> –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º </b>",  reply_markup=keyboard)

    # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
    keyboard = telebot.types.InlineKeyboardMarkup()
    buttons = [telebot.types.InlineKeyboardButton("{}".format(id2hero(hero["id"])), callback_data=hero["id"])
               for hero in prediction["high"]]
    keyboard.row(*buttons)
    bot.send_message(chat_id, "<b> –í–∞—Ä–∏–∞–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º </b>", reply_markup=keyboard)


def prompt(chat_id: int):
    def build_keyboard():
        next_move = last_move_made(chat_id) + 1
        moves = chosen_heroes(chat_id)
        prediction = api_call(next_move, moves)

        keyboard = telebot.types.InlineKeyboardMarkup()
        buttons = [telebot.types.InlineKeyboardButton(id2hero(hero_id), callback_data=hero_id)
                   for hero_id in prediction if not is_hero_has_already_chosen(chat_id, hero_id)]
        keyboard.row(*buttons)

        return keyboard

    def build_text():
        if choosing_team_number == my_number(chat_id):
            part1 = "<b>–•–æ–¥ {} (–Ω–∞—à).</b> ".format(move_number)
            if move_type == "ban":
                part2 = "–ö–æ–≥–æ –∑–∞–±–∞–Ω–∏–º? –í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∏–º—è –≥–µ—Ä–æ—è üëá"
            else:
                part2 = "–ö–æ–≥–æ –ø–∏–∫–Ω–µ–º? –í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∏–º—è –≥–µ—Ä–æ—è üëá"
        else:
            part1 = "<b>–•–æ–¥ {} (–∏—Ö).</b> ".format(move_number)
            if move_type == "ban":
                part2 = "–ö–æ–≥–æ –æ–Ω–∏ –∑–∞–±–∞–Ω–∏–ª–∏? –ù–∞–ø–∏—à–∏ –∏–º—è –≥–µ—Ä–æ—è üëá"
            else:
                part2 = "–ö–æ–≥–æ –æ–Ω–∏ –ø–∏–∫–Ω—É–ª–∏? –ù–∞–ø–∏—à–∏ –∏–º—è –≥–µ—Ä–æ—è üëá"

        return part1 + part2

    move_number = last_move_made(chat_id) + 1
    choosing_team_number, move_type = get_next_move(chat_id)

    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ - –Ω–∞—à, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–≤–æ—é, –æ—Å–æ–±–µ–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    if move_number == 1 and choosing_team_number == my_number(chat_id):
        return first_move_prompt(chat_id)

    choosing_team_number, move_type = get_next_move(chat_id)
    if choosing_team_number == my_number(chat_id):
        bot.send_message(chat_id, build_text(),  reply_markup=build_keyboard())
    else:
        bot.send_message(chat_id, build_text())


def final_message(chat_id):
    bot.send_message(chat_id, "üéâ <b>–î—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>")


@bot.message_handler(commands=['about'])
def about(message):
    hello_message = "üëã <b>–ê–≤—Ç–æ—Ä:</b> –ì–æ–Ω—á–∞—Ä–æ–≤ –ò–≥–æ—Ä—å, –ª–∏—Ü–µ–π 1557"
    bot.send_message(message.chat.id, hello_message)


@bot.message_handler(commands=['start', 'restart'])
def start(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton('–ù–∞—à', callback_data='start_0'),
                 telebot.types.InlineKeyboardButton('–ù–µ –Ω–∞—à', callback_data='start_1'))

    bot.send_message(message.chat.id, text='<b>–ß–µ–π –ø–µ—Ä–≤—ã–π —Ö–æ–¥?</b>', reply_markup=keyboard)


@bot.message_handler(content_types=["text"])
def parse_answer(message):
    hero_id = get_hero(message.text)

    if hero_id == -1:  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID –∏–ª–∏ –∏–º—è –≥–µ—Ä–æ—è
        bot.send_message(message.chat.id, "ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        return

    if is_hero_has_already_chosen(message.chat.id, hero_id):
        bot.send_message(message.chat.id, "üôÖ‚Äç –≠—Ç–æ–≥–æ –≥–µ—Ä–æ—è —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª–∏")
        return

    current_move = last_move_made(message.chat.id) + 1
    moves = chosen_heroes(message.chat.id)
    moves.append(hero_id)
    set_context(message.chat.id, {"last_move": current_move, "moves": moves})

    if is_last_move(current_move):
        final_message(message.chat.id)
    else:
        prompt(message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('start_'))
def start_callback_query(call):
    if call.data == "start_0":
        set_context(call.message.chat.id, {"order": 0, "last_move": 0, "moves": []})
    elif call.data == "start_1":
        set_context(call.message.chat.id, {"order": 1, "last_move": 0, "moves": []})

    prompt(call.message.chat.id)


@bot.callback_query_handler(func=lambda call: True)
def move_callback_query(call):
    message = call.message
    message.text = str(call.data)
    parse_answer(message)


if __name__ == '__main__':
    load_heroes()
    bot.infinity_polling()
